#+TITLE:     CNFgen - formula transformations
#+AUTHOR:    Massimo Lauria
#+EMAIL:     massimo.lauria@uniroma1.it
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_HEAD_EXTRA: <meta charset='utf-8'>
#+HTML_HEAD_EXTRA: <meta http-equiv="X-UA-Compatible" content="chrome=1">
#+HTML_HEAD_EXTRA: <meta name="description" content="CNFgen: Combinatorial benchmarks for SAT solvers">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" media="screen" href="stylesheets/stylesheet.css">
#+HTML_HEAD: <style type="text/css"> .title  { height: 0; margin: 0; display: none; } </style>


#+BEGIN_EXPORT html
<!-- HEADER -->
    <div id="header_wrap" class="outer">
        <header class="inner">
          <a id="forkme_banner" href="https://github.com/MassimoLauria/cnfgen">View on GitHub</a>

          <h1 id="project_title"><a id="project_title" href="http://massimolauria.net/cnfgen">CNFgen</a></h1>
          <h2 id="project_tagline">Combinatorial benchmarks for SAT solvers</h2>

            <section id="downloads">
              <a class="zip_download_link" href="https://github.com/MassimoLauria/cnfgen/zipball/master">Download this project as a .zip file</a>
              <a class="tar_download_link" href="https://github.com/MassimoLauria/cnfgen/tarball/master">Download this project as a tar.gz file</a>
            </section>
        </header>
    </div>
#+END_EXPORT
#+BEGIN_EXPORT html
    <div id="main_content_wrap" class="outer">
      <section id="main_content" class="inner">
#+END_EXPORT

Often we want to increase the hardness of formulas in a controlled way
to study their proof complexity or how SAT solvers perform on them.

* Usage

  CNFgen  include two  tools with  formula transformation  capability:
  the  first  is  =cnfgen=  itself,   which  can  apply  one  or  more
  transformations after it generates the CNF, and directly outputs the
  DIMACS of the final formula,

  : cnfgen <family> <params> -T <tr1> <args1> -T <tr2> <args2> ...

  while =cnftransform=  applies a  single transformations to  a DIMACS
  formula in input, using the command line

  : cnftransform  [-i <inputfile>] [-o <outputfile>] <transform> <params>
  
  For example,  if we want  to substitute each  variables of a  CNF in
  DIMACS  format,  given in  standard  input,  with  a  XOR of  3  new
  variables and output the formula on standard output it is sufficient
  to type

  : cnftransform xor 3
   
  For a list of all implemented transformations you can type either 
   
  : cnfgen --help-transform

  or
   
  : cnftransform --help

* Available transformations

  The   =cnfgen=  and   =cnftransform=   tools   expose  the   formula
  transformations implemented in [[http://cnfgen.readthedocs.org/en/latest/][the  =cnfgen= library]]. Both tools
  only apply  at most one  transformation at  a time. Via  python code
  there is definitely more flexibility.

*** Exactly one

    We substitute  each variable x  with a function  f(x₁,x₂,...,) over
    =<N>= new  variables, where  the function  is true  if and  only if
    exactly one of the new variable is true.

    : cnfgen -T one -Ta <N> <formula_type> <formula_param>

*** Exclusive OR

    We substitute each  variable x with the XOR of  =<N>= new variables
    (x₁,x₂,...).

    : cnfgen -T xor -Ta <N> <formula_type> <formula_param>

*** If Then Else

    We  substitute  each  variable  x  with  the  function  over  three
    variables y₀,y₁,y₂  such that if y₀  is true then the  value of the
    function is equal to y₁, otherwise it is equal to y₂.

    : cnfgen -T ite <formula_type> <formula_param>

*** All equals

    We substitute  each variable x  with a function  f(x₁,x₂,...,) over
    =<N>= new  variables, where  the function  is true  if and  only if
    the variables are either all true or all false.

    : cnfgen -T eq -Ta <N> <formula_type> <formula_param>

*** Not all equals

    We substitute  each variable x  with a function  f(x₁,x₂,...,) over
    =<N>= new  variables, where  the function  is true  if and  only if
    at least two of the arguments are different.

    : cnfgen -T neq -Ta <N> <formula_type> <formula_param>

*** Or

    We substitute  each variable  x with the  disjunction of  =<N>= new
    variables (x₁,x₂,...).

    : cnfgen -T or -Ta <N> <formula_type> <formula_param>

*** Loose Majority

    We substitute  each variable x  with a function  f(x₁,x₂,...,) over
    =<N>= new  variables, where  the function  is true  if and  only if
    at least half of the variables are true.

    : cnfgen -T maj -Ta <N> <formula_type> <formula_param>

*** One dimensional lifting

    For each variable x we introduce =<N>= value variables (x₁,x₂,...)
    and  =<N>=  selector  variables  (y₁,y₂,...).  The  value  of  the
    original  variable  is  substituted  with  the  value  of  the  xᵢ
    variables for  which the selector yᵢ  is active. We want  at least
    one selector to be active.

    Concretely  the  variable  x  is   substituted  by  ∧ᵢ(yᵢ  →  xᵢ).
    Furthermore the  clause y₁  ∨ y₂ ∨  … is added  to the  formula to
    guarantee that at least one selector is active.
 
    : cnfgen -T lift -Ta <N> <formula_type> <formula_param>

* Background

  Pick  a  formula F  on  variables  {xᵢ}.  We  can take  a  function
  g:{0,1}ˡ→{0,1}  and  substitute each  variable  with  the value  of
  function g on l independent copies of the variables. For example if
  g is XOR and l=2 then the CNF

  x ∧ (y v ¬z)

  becomes

  x₁⊕x₂ ∧ (y₁⊕y₂ v ¬z₁⊕z₂).

  Each of the  two original clauses must be represented  in CNF form:
  x₁⊕x₂ becomes (x₁ v x₂)∧( ¬x₁ v ¬x₂); and y₁⊕y₂ v ¬z₁⊕z₂ becomes

  ( y₁ v  y₂  z₁ v ¬z₂)∧
  (¬y₁ v ¬y₂  z₁ v ¬z₂)∧
  ( y₁ v  y₂ ¬z₁ v  z₂)∧
  (¬y₁ v ¬y₂ ¬z₁ v  z₂)

  Some of  the transformations can be  a little bit more  complex than
  that, but the XOR is a good example of how to make a formula harder.


#+BEGIN_EXPORT html
    </section></div>
#+END_EXPORT

#+BEGIN_EXPORT html
    <!-- FOOTER  -->
    <div id="footer_wrap" class="outer">
      <footer class="inner">
        <p class="copyright">CNFgen maintained by <a href="https://github.com/MassimoLauria">MassimoLauria</a></p>
        <p>Published with <a href="https://pages.github.com">GitHub Pages</a></p>
      </footer>
    </div>
#+END_EXPORT

# Local variables:
# org-html-preamble: nil
# org-html-postamble: nil
# org-html-toplevel-hlevel: 3
# org-html-head-include-default-style: nil
# End:

